{"version":3,"sources":["Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","this","width","height","lines","canvas","frame","originX","originY","top","y","left","x","rect","fabric","Rect","fill","hasControls","textbox","Textbox","fontSize","hasBorders","breakWords","group","Group","subTargetCheck","active","on","e","unactive","removeWithUpdate","add","remove","setActiveObject","enterEditing","backgroundColor","addWithUpdate","Canvas","document","getElementById","fabricCanvas","util","addListener","body","options","repeat","which","keyCode","target","pointer","className","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAsBqBA,E,WAEjB,WAAYC,GAAQ,IAAD,2BACfC,KAAKC,MAAQ,IACbD,KAAKE,OAAS,IACdF,KAAKG,MAAQ,EAEbH,KAAKI,OAASL,EAAMK,OACpB,IAAMC,EAAQ,CACVC,QAAS,SACTC,QAAS,SACTC,IAAKT,EAAMU,EACXC,KAAMX,EAAMY,EACZV,MAAOD,KAAKC,MACZC,OAAQF,KAAKE,QAGjBF,KAAKY,KAAO,IAAIC,SAAOC,KAAX,eACLT,EADK,CAERU,KAAM,UACNC,aAAa,KA6CjBhB,KAAKiB,QAAU,IAAIJ,SAAOK,QAAQ,GAAnB,eACRb,EADQ,CAEXJ,MAAOD,KAAKC,MACZO,IAAKT,EAAMU,EACXU,SAAU,GAGVJ,KAAM,OACNK,YAAY,EACZC,YAAY,KAIhBrB,KAAKsB,MAAQ,IAAIT,SAAOU,MAAM,GAAI,CAAEC,gBAAgB,IAEpDxB,KAAKyB,SAELzB,KAAKiB,QAAQS,GAAG,aAAa,SAACC,GAC1B,EAAKF,YAwBTzB,KAAKiB,QAAQS,GAAG,kBAAkB,SAACC,GAC/B,EAAKC,c,qDAKT5B,KAAKsB,MAAMO,iBAAiB7B,KAAKY,MACjCZ,KAAKsB,MAAMO,iBAAiB7B,KAAKiB,SACjCjB,KAAKI,OAAO0B,IAAI9B,KAAKY,MACrBZ,KAAKI,OAAO0B,IAAI9B,KAAKiB,SACrBjB,KAAKI,OAAO2B,OAAO/B,KAAKsB,OACxBtB,KAAKI,OAAO4B,gBAAgBhC,KAAKiB,SACjCjB,KAAKiB,QAAQgB,eAEbjC,KAAKY,KAAKsB,gBAAkB,Y,iCAI5BlC,KAAKI,OAAO2B,OAAO/B,KAAKY,MACxBZ,KAAKI,OAAO2B,OAAO/B,KAAKiB,SAExBjB,KAAKsB,MAAMa,cAAcnC,KAAKY,MAC9BZ,KAAKsB,MAAMa,cAAcnC,KAAKiB,SAC9BjB,KAAKI,OAAO0B,IAAI9B,KAAKsB,OACrBtB,KAAKY,KAAKsB,gBAAkB,gB,KCpJfE,E,4LAGjB,IAAMhC,EAASiC,SAASC,eAAe,KACjCC,EAAe,IAAI1B,SAAOuB,OAAOhC,EAAQ,CAAEH,MAAO,KAAMC,OAAQ,KAAMgC,gBAAiB,YAG7FrB,SAAO2B,KAAKC,YAAYJ,SAASK,KAAM,WAAW,SAAUC,GAC1D,IAAIA,EAAQC,OAIFD,EAAQE,OAASF,EAAQG,WAOrCP,EAAab,GAAG,kBAAkB,SAACC,GACjC,IAAKA,EAAEoB,OACM,IAAIjD,EAAK,CAAEa,EAAGgB,EAAEqB,QAAQrC,EAAGF,EAAGkB,EAAEqB,QAAQvC,EAAGL,OAAQmC,S,+BAqClE,OACE,yBAAKU,UAAU,eACb,4BAAQA,UAAU,IAAIC,GAAG,W,GA5DGC,IAAMC,WCOtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SD6H3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac264fb2.chunk.js","sourcesContent":["import { fabric } from 'fabric'\n\n// fabric.Text.prototype.calcTextHeight = function () {\n//     var lineHeight, height = 0;\n//     for (var i = 0, len = this._textLines.length; i < len; i++) {\n//         lineHeight = this.getHeightOfLine(i);\n//         height += lineHeight;\n//     }\n//     return height;\n// };\n\n// fabric.Text.prototype.getMaxTextWidth = function () {\n//     var maxWidth = this.getLineWidth(0)\n//     for (var i = 0, len = this._textLines.length; i < len; i++) {\n//         maxWidth = Math.max(maxWidth, this.getLineWidth(i));\n\n//     }\n//     return maxWidth;\n// }\n\n\n\nexport default class Post {\n\n    constructor(props) {\n        this.width = 100;\n        this.height = 100;\n        this.lines = 2;\n\n        this.canvas = props.canvas;\n        const frame = {\n            originX: 'center',\n            originY: 'center',\n            top: props.y,\n            left: props.x,\n            width: this.width,\n            height: this.height\n        };\n\n        this.rect = new fabric.Rect({\n            ...frame,\n            fill: '#FFF09A',\n            hasControls: false,\n        });\n\n        // const LimitedTextbox = fabric.util.createClass(fabric.Textbox, {\n\n        //     // Override `insertChars` method\n        //     insertChars: function (chars) {\n        //         if (this.maxWidth) {\n        //             const textWidthUnderCursor = this._getLineWidth(this.ctx, this.get2DCursorLocation().lineIndex);\n        //             if (textWidthUnderCursor + this.ctx.measureText(chars).width > this.maxWidth) {\n        //                 chars = '\\n' + chars;\n        //             }\n        //         }\n\n        //         if (this.maxLines) {\n        //             const newLinesLength = this._wrapText(this.ctx, this.text + chars).length;\n        //             if (newLinesLength > this.maxLines) {\n        //                 return;\n        //             }\n        //         }\n\n        //         // Call parent class method\n        //         this.callSuper('insertChars', chars);\n        //     }\n\n        // });\n\n        // const thisTarget = this;\n        // const LimitedTextbox = fabric.util.createClass(fabric.Textbox, {\n        //     onInput(e) {\n        //         this.text += '/n';\n        //         if (this.width > thisTarget.width) {\n        //             return;\n        //         }\n\n        //         if ((this._textLines.length) > thisTarget.lines) {\n        //             return;\n        //         }\n\n        //         // Call parent class method\n        //         this.callSuper('onInput', e);\n        //     }\n        // });\n\n\n        this.textbox = new fabric.Textbox('', {\n            ...frame,\n            width: this.width,\n            top: props.y,\n            fontSize: 30,\n            // textAlign: 'center',\n            // textBaseline: 'middle',\n            fill: '#000',\n            hasBorders: false,\n            breakWords: true,\n        });\n\n\n        this.group = new fabric.Group([], { subTargetCheck: true });\n\n        this.active();\n\n        this.textbox.on('mousedown', (e) => {\n            this.active();\n        });\n\n\n        // this.textbox.set('height', 100);\n\n\n        // this.textbox.on('input', (e) => {\n        //     if (this.textbox.width > this.width) {\n        //         return;\n        //     }\n        //     if ((this.textbox._textLines.length) > this.lines) {\n        //         return;\n        //     }\n\n        //     // Call parent class method\n        //     this.callSuper('onInput', e);\n        // });\n        // this.textbox.on('changed', (e) => {\n        //     if (this.textbox.getLineWidth(0) > this.width) {\n        //         this.textbox._wrapText(this.textbox, this.width);\n        //     }\n        // })\n\n        this.textbox.on('editing:exited', (e) => {\n            this.unactive();\n        });\n    }\n\n    active() {\n        this.group.removeWithUpdate(this.rect);\n        this.group.removeWithUpdate(this.textbox);\n        this.canvas.add(this.rect);\n        this.canvas.add(this.textbox);\n        this.canvas.remove(this.group);\n        this.canvas.setActiveObject(this.textbox);\n        this.textbox.enterEditing();\n\n        this.rect.backgroundColor = '#00A2FF';\n    }\n\n    unactive() {\n        this.canvas.remove(this.rect);\n        this.canvas.remove(this.textbox);\n\n        this.group.addWithUpdate(this.rect);\n        this.group.addWithUpdate(this.textbox);\n        this.canvas.add(this.group);\n        this.rect.backgroundColor = '#00A2FF00';\n    }\n}","import React from 'react';\nimport './App.css';\nimport { fabric } from 'fabric'\nimport Post from './Post.js'\n\nexport default class Canvas extends React.Component {\n\n  componentDidMount() {\n    const canvas = document.getElementById('c');\n    const fabricCanvas = new fabric.Canvas(canvas, { width: 1024, height: 1024, backgroundColor: '#C6CDD5' });\n\n\n    fabric.util.addListener(document.body, 'keydown', function (options) {\n      if (options.repeat) {\n        return;\n      }\n\n      var key = options.which || options.keyCode; // key detection\n      //在文字编辑状态是不能删除post\n      // if (key === 8) {\n      //   fabricCanvas.remove(fabricCanvas.getActiveObject());\n      // }\n    });\n\n    fabricCanvas.on('mouse:dblclick', (e) => {\n      if (!e.target) {\n        var post = new Post({ x: e.pointer.x, y: e.pointer.y, canvas: fabricCanvas });\n      } else {\n      }\n    });\n    // fabricCanvas.getActiveObject().toGroup();\n\n    // fabricCanvas.on({\n    //   'touch:gesture': function () {\n    //   },\n    //   'touch:drag': function () {\n    //     alert('move');\n    //   },\n    //   'touch:orientation': function () {\n    //   },\n    //   'touch:shake': function () {\n    //   },\n    //   'touch:longpress': function () {\n    //   }\n    // });\n\n    // fabricCanvas.on('mouse:up', (e) => {\n    //   alert('up');\n    // });\n\n\n    // let textbox = new fabric.Textbox('Lorum ipsum dolor sit amet', {\n    //   left: 50,\n    //   top: 50,\n    //   width: 150,\n    //   fontSize: 20\n    // });\n    // let group = new fabric.Group([textbox]);\n    // fabricCanvas.add(group);\n  }\n\n\n  render() {\n    return (\n      <div className='bcContainer'>\n        <canvas className='c' id='c' />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}