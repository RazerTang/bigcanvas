{"version":3,"sources":["Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","pos","top","y","left","x","width","height","rect","fabric","Rect","fill","textbox","Textbox","fontSize","this","_objects","textBox","backgroundColor","enterEditing","Group","Canvas","canvas","document","getElementById","fabricCanvas","util","addListener","body","options","repeat","which","keyCode","on","e","target","post","pointer","add","setActiveObject","className","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAEqBA,E,YAEjB,WAAYC,GAAQ,oBAChB,IAAMC,EAAM,CACRC,IAAKF,EAAMG,EAAI,GACfC,KAAMJ,EAAMK,EAAI,GAChBC,MAAO,IACPC,OAAQ,KAGRC,EAAO,IAAIC,SAAOC,KAAX,eACJT,EADI,CAEPU,KAAM,aAGNC,EAAU,IAAIH,SAAOI,QAAQ,GAAnB,eACPZ,EADO,CAEVa,SAAU,GACVH,KAAM,aAhBK,iDAmBT,CAACH,EAAMI,K,wEAIb,IAAMJ,EAAOO,KAAKC,SAAS,GACrBC,EAAUF,KAAKC,SAAS,GAC9BR,EAAKU,gBAAkB,UACvBD,EAAQE,iB,mCAIKJ,KAAKC,SAAS,GACtBE,gBAAkB,gB,GAjCGT,SAAOW,OCGpBC,E,4LAGjB,IAAMC,EAASC,SAASC,eAAe,KACjCC,EAAe,IAAIhB,SAAOY,OAAOC,EAAQ,CAAEhB,MAAO,KAAMC,OAAQ,KAAMW,gBAAiB,YAG7FT,SAAOiB,KAAKC,YAAYJ,SAASK,KAAM,WAAW,SAAUC,GAC1D,IAAIA,EAAQC,OAIFD,EAAQE,OAASF,EAAQG,WAMrCP,EAAaQ,GAAG,kBAAkB,SAACC,GACjC,IAAKA,EAAEC,OAAQ,CACb,IAAIC,EAAO,IAAIrC,EAAKmC,EAAEG,SACtBZ,EAAaa,IAAIF,GACjBX,EAAac,gBAAgBH,S,+BAiBjC,OACE,yBAAKI,UAAU,eACb,4BAAQA,UAAU,IAAIC,GAAG,W,GAzCGC,IAAMC,WCOtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAASC,eAAe,SD6H3C,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5815edcc.chunk.js","sourcesContent":["import { fabric } from 'fabric'\n\nexport default class Post extends fabric.Group {\n\n    constructor(props) {\n        const pos = {\n            top: props.y - 50,\n            left: props.x - 50,\n            width: 100,\n            height: 100\n        };\n\n        let rect = new fabric.Rect({\n            ...pos,\n            fill: '#FFF09A'\n        });\n\n        var textbox = new fabric.Textbox('', {\n            ...pos,\n            fontSize: 20,\n            fill: '#FF0000',\n        });\n\n        super([rect, textbox]);\n    }\n\n    onSelect() {\n        const rect = this._objects[0];\n        const textBox = this._objects[1];\n        rect.backgroundColor = '#00A2FF';\n        textBox.enterEditing();\n    }\n\n    onDeselect() {\n        const rect = this._objects[0];\n        rect.backgroundColor = '#00A2FF00';\n    }\n}","import React from 'react';\nimport './App.css';\nimport { fabric } from 'fabric'\nimport Post from './Post.js'\n\nexport default class Canvas extends React.Component {\n\n  componentDidMount() {\n    const canvas = document.getElementById('c');\n    const fabricCanvas = new fabric.Canvas(canvas, { width: 1024, height: 1024, backgroundColor: '#C6CDD5' });\n\n\n    fabric.util.addListener(document.body, 'keydown', function (options) {\n      if (options.repeat) {\n        return;\n      }\n\n      var key = options.which || options.keyCode; // key detection\n      // if (key === 8) {\n      //   fabricCanvas.remove(fabricCanvas.getActiveObject());\n      // }\n    });\n\n    fabricCanvas.on('mouse:dblclick', (e) => {\n      if (!e.target) {\n        var post = new Post(e.pointer);\n        fabricCanvas.add(post);\n        fabricCanvas.setActiveObject(post);\n      } else {\n      }\n    });\n\n    // let textbox = new fabric.Textbox('Lorum ipsum dolor sit amet', {\n    //   left: 50,\n    //   top: 50,\n    //   width: 150,\n    //   fontSize: 20\n    // });\n    // fabricCanvas.add(textbox).setActiveObject(textbox);\n    // textbox.enterEditing();\n  }\n\n\n  render() {\n    return (\n      <div className='bcContainer'>\n        <canvas className='c' id='c' />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}