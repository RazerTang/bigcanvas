{"version":3,"sources":["Post.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","this","width","height","lines","isActived","strokeWidth","fontSize","init","timer","group","on","d","Date","getTime","active","textbox","e","unactive","canvas","frame","originX","originY","top","y","left","x","rect","fabric","Rect","fill","hasControls","stroke","LimitedTextbox","util","createClass","Textbox","textAlign","hasBorders","breakWords","Group","data","removeWithUpdate","remove","add","setActiveObject","set","enterEditing","addWithUpdate","Canvas","document","getElementById","fabricCanvas","backgroundColor","addListener","body","options","repeat","key","which","keyCode","ao","getActiveObject","type","get","console","log","getActiveObjects","forEach","obj","target","pointer","className","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1906f3f.chunk.js","sourcesContent":["import { fabric } from 'fabric'\n\n// fabric.Text.prototype.calcTextHeight = function () {\n//     var lineHeight, height = 0;\n//     for (var i = 0, len = this._textLines.length; i < len; i++) {\n//         lineHeight = this.getHeightOfLine(i);\n//         height += lineHeight;\n//     }\n//     return height;\n// };\n\n// fabric.Text.prototype.getMaxTextWidth = function () {\n//     var maxWidth = this.getLineWidth(0)\n//     for (var i = 0, len = this._textLines.length; i < len; i++) {\n//         maxWidth = Math.max(maxWidth, this.getLineWidth(i));\n\n//     }\n//     return maxWidth;\n// }\n\n\n\nexport default class Post {\n\n    constructor(props) {\n        this.width = 100;\n        this.height = 100;\n        this.lines = 2;\n        this.isActived = false;\n        this.strokeWidth = 5;\n        this.fontSize = 10;\n\n        this.init(props);\n\n        var timer = 0;\n        this.group.on('mouseup', () => {\n            var d = new Date();\n            timer = d.getTime();\n        });\n        this.group.on('mousedown', () => {\n            var d = new Date();\n            if ((d.getTime() - timer) < 300) {\n                this.active();\n            }\n        });\n\n        this.textbox.on('editing:exited', (e) => {\n            this.unactive();\n        });\n    }\n\n    init(props) {\n        this.canvas = props.canvas;\n        const frame = {\n            originX: 'center',\n            originY: 'center',\n            top: props.y,\n            left: props.x,\n            width: this.width,\n            height: this.height\n        };\n\n        this.rect = new fabric.Rect({\n            ...frame,\n            fill: '#FFF09A',\n            hasControls: false,\n            stroke: '#00A2FF',\n            strokeWidth: this.strokeWidth,\n        });\n\n        const LimitedTextbox = fabric.util.createClass(fabric.Textbox, {\n\n        });\n\n\n        this.textbox = new LimitedTextbox('', {\n            ...frame,\n            width: this.width,\n            top: props.y,\n            fontSize: this.fontSize,\n            textAlign: 'center',\n            // textBaseline: 'middle',\n            fill: '#000',\n            hasBorders: false,\n            breakWords: true,\n        });\n\n\n        this.group = new fabric.Group();\n        this.group.data = this;\n\n        this.active();\n    }\n\n    /**\n     * active可以激活的两个图形\n     * 1.创建的时候\n     * 2.选中该group并输入文字的时候\n     */\n    active() {\n        this.group.removeWithUpdate(this.rect);\n        this.group.removeWithUpdate(this.textbox);\n        this.canvas.remove(this.group);\n\n        this.canvas.add(this.rect);\n        this.canvas.add(this.textbox);\n        this.canvas.setActiveObject(this.textbox);\n\n        this.rect.set(\"strokeWidth\", this.strokeWidth);\n\n        this.textbox.enterEditing();\n        this.isActived = true;\n    }\n\n    /**\n     * unactive的条件为文字编辑状态消失的时候\n     */\n    unactive() {\n        this.rect.set(\"strokeWidth\", 0);\n\n        this.canvas.remove(this.rect);\n        this.canvas.remove(this.textbox);\n\n        this.group.addWithUpdate(this.rect);\n        this.group.addWithUpdate(this.textbox);\n        this.canvas.add(this.group);\n\n        this.isActived = false;\n    }\n\n    isActived() {\n        return this.isActived;\n    }\n}","import React from 'react';\nimport './App.css';\nimport { fabric } from 'fabric'\nimport Post from './Post.js'\n\nexport default class Canvas extends React.Component {\n\n  componentDidMount() {\n    const canvas = document.getElementById('c');\n    const fabricCanvas = new fabric.Canvas(canvas, { width: 1024, height: 1024, backgroundColor: '#C6CDD5' });\n\n\n    fabric.util.addListener(document.body, 'keydown', function (options) {\n      if (options.repeat) {\n        return;\n      }\n      var key = options.which || options.keyCode; // key detection\n\n      //active object可能是选中的Post or 正在输入的TextBox\n      //需要区分ao是group还是textbox\n      //1.选择group，按delete键则删除\n      //2.选择的是textbox,按delte键则是删除文字\n      const ao = fabricCanvas.getActiveObject();\n      if (ao) {\n        const type = ao.get('type');\n        console.log(type);\n        if (type === 'textbox') {\n          //直接触发文本框的编辑,开始输入文字\n        } else if (type === 'group') {\n          //删除group\n          if (key === 8) {\n            fabricCanvas.remove(ao);\n          }\n          //触发文本框的编辑，开始输入文字\n          else {\n            const post = ao.data;\n            post.active();\n          }\n        } else if (type === 'activeSelection') {\n          if (key === 8) {\n            fabricCanvas.getActiveObjects().forEach((obj) => {\n              fabricCanvas.remove(obj)\n            });\n          }\n        }\n      }\n    });\n\n    fabricCanvas.on('mouse:dblclick', (e) => {\n      if (!e.target) {\n        new Post({ x: e.pointer.x, y: e.pointer.y, canvas: fabricCanvas });\n      } else {\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className='bcContainer'>\n        <canvas className='c' id='c' />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}